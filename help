import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AlbumService } from '../../services/album.service';
import { SongsService } from '../../services/songs.service';
import { UserService } from '../../services/user.service';
import { NumbersService } from '../../services/numbers.service';
import { ResponseAlbumDto, ResponseSongDto } from '../../dtos/albumes/musics.response.dto';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { forkJoin, Observable, of } from 'rxjs';
import { catchError, switchMap, map } from 'rxjs/operators';
import { VoteType, VoteMessage } from '../../dtos/albumes/songs.dto';
import { AuthService } from '../../services/auth.service';
import { ModalService, ModalType } from '../../services/modal.service';
import { UserGet, UserDescription } from '../../dtos/usuarios/users.dto';

@Component({
  selector: 'app-album',
  templateUrl: './album.component.html',
  styleUrls: ['./album.component.css']
})
export class AlbumComponent implements OnInit {
  // Propiedades principales
  album: ResponseAlbumDto | null = null;
  albumSlug: string | null = null;
  isLoading = true;
  error: string | null = null;
  isAuthenticated = false;

  // Propiedades para las imágenes y datos adicionales
  albumCover: SafeUrl | null = null;
  owner: UserDescription | null = null;
  featuredArtists: UserDescription[] = [];

  // Estado para los votos de las canciones
  songVotes: Map<number, VoteType | null> = new Map();
  songVotesLoading: Map<number, boolean> = new Map();

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private albumService: AlbumService,
    protected songsService: SongsService,
    private userService: UserService,
    private authService: AuthService,
    private modalService: ModalService,
    public numbersService: NumbersService,
    private sanitizer: DomSanitizer
  ) {}

  ngOnInit(): void {
    this.authService.isAuthenticated$.subscribe(isAuth => {
      this.isAuthenticated = isAuth;
    });

    // Obtener el slug del álbum de la URL
    this.route.paramMap.subscribe(params => {
      this.albumSlug = params.get('albumSlug');

      if (this.albumSlug) {
        this.loadAlbumBySlug(this.albumSlug);
      } else {
        this.error = 'Álbum no encontrado';
        this.isLoading = false;
      }
    });
  }

  // Cargar album por slug
  loadAlbumBySlug(slug: string): void {
    this.isLoading = true;
    this.error = null;

    this.albumService.getAlbumBySlug(slug).pipe(
      switchMap(album => {
        this.album = album;

        // Cargar portada del álbum
        const coverObservable = this.songsService.obtenerPortadaPorId(album.id).pipe(
          map(blob => {
            const objectUrl = URL.createObjectURL(blob);
            return this.sanitizer.bypassSecurityTrustUrl(objectUrl);
          }),
          catchError(error => {
            console.error('Error cargando la portada:', error);
            return of(null);
          })
        );

        // Cargar información del propietario usando getUserDescription en lugar de getUserById
        const ownerObservable = this.userService.getUserDescription(album.owner).pipe(
          catchError(error => {
            console.error('Error cargando datos del artista:', error);
            return of(null);
          })
        );

        // Cargar artistas invitados en las canciones
        const uniqueFeaturedArtistIds = new Set<number>();
        album.songs.forEach(song => {
          if (song.artistasFt && song.artistasFt.length > 0) {
            song.artistasFt.forEach(artistId => uniqueFeaturedArtistIds.add(artistId));
          }
        });

        const featuredArtistsObservables: Observable<UserDescription | null>[] = [];

        uniqueFeaturedArtistIds.forEach(artistId => {
          featuredArtistsObservables.push(
            this.userService.getUserDescription(artistId).pipe(
              catchError(error => {
                console.error(`Error cargando artista con ID ${artistId}:`, error);
                return of(null);
              })
            )
          );
        });

        // Inicializar mapas de votos
        album.songs.forEach(song => {
          this.songVotes.set(song.id, null);
          this.songVotesLoading.set(song.id, false);
        });

        // Si el usuario está autenticado, cargar los votos actuales
        if (this.isAuthenticated) {
          this.loadUserVotes(album.songs);
        }

        return forkJoin({
          cover: coverObservable,
          owner: ownerObservable,
          featuredArtists: forkJoin(featuredArtistsObservables)
        });
      })
    ).subscribe({
      next: (results) => {
        this.albumCover = results.cover;
        this.owner = results.owner;

        // Filtrar artistas nulos del resultado
        this.featuredArtists = results.featuredArtists.filter(artist => artist !== null) as UserDescription[];

        this.isLoading = false;
      },
      error: (err) => {
        console.error('Error cargando el álbum:', err);
        this.error = 'No se pudo cargar el álbum. Por favor, intenta nuevamente.';
        this.isLoading = false;
      }
    });
  }

  // Cargar los votos actuales del usuario para cada canción
  loadUserVotes(songs: ResponseSongDto[]): void {
    // Esta función simula la obtención de votos (deberías implementar este endpoint en el backend)
    // Aquí puedes agregar la lógica para obtener los votos actuales del usuario
    // Por ahora, dejaremos los votos como nulos
  }

  // Navegar al perfil del artista
  goToArtistProfile(slugOrId: string | number): void {
    if (typeof slugOrId === 'string') {
      this.router.navigate(['/perfil', slugOrId]);
    } else if (typeof slugOrId === 'number') {
      // Si solo tenemos el ID, primero debemos obtener el slug
      this.userService.getUserDescription(slugOrId).subscribe({
        next: (user) => {
          if (user && user.slug) {
            this.router.navigate(['/perfil', user.slug]);
          }
        },
        error: (err) => {
          console.error('Error obteniendo perfil:', err);
        }
      });
    }
  }

  // Funciones para la reproducción de canciones
  playSong(song: ResponseSongDto): void {
    // Aquí añadirías la lógica para reproducir la canción
    // Esta funcionalidad se implementará más adelante con el miniplayer
    console.log('Reproduciendo canción:', song.name);
  }

  // Función para formatear la duración de la canción
  formatDuration(durationInSeconds: number): string {
    const minutes = Math.floor(durationInSeconds / 60);
    const seconds = Math.floor(durationInSeconds % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
  }

  // Funciones para los votos
  vote(song: ResponseSongDto, voteType: VoteType): void {
    if (!this.isAuthenticated) {
      this.modalService.openModal(ModalType.Auth);
      return;
    }

    const currentVote = this.songVotes.get(song.id);
    this.songVotesLoading.set(song.id, true);

    const voteMessage: VoteMessage = {
      songId: song.id,
      voteType: voteType
    };

    this.songsService.votar(voteMessage).subscribe({
      next: () => {
        // If clicking the same vote type, remove the vote
        if (currentVote === voteType) {
          this.songVotes.set(song.id, null);

          // Update counters - decrease the count for the removed vote
          if (voteType === VoteType.LIKE) {
            song.likes = Math.max(0, (song.likes || 1) - 1);
          } else {
            song.dislikes = Math.max(0, (song.dislikes || 1) - 1);
          }
        } else {
          // New vote or changing vote type
          this.songVotes.set(song.id, voteType);

          // Update counters
          if (voteType === VoteType.LIKE) {
            song.likes = (song.likes || 0) + 1;
            if (currentVote === VoteType.DISLIKE) {
              song.dislikes = Math.max(0, (song.dislikes || 1) - 1);
            }
          } else {
            song.dislikes = (song.dislikes || 0) + 1;
            if (currentVote === VoteType.LIKE) {
              song.likes = Math.max(0, (song.likes || 1) - 1);
            }
          }
        }

        this.songVotesLoading.set(song.id, false);
      },
      error: (err) => {
        console.error('Error al votar:', err);
        this.songVotesLoading.set(song.id, false);
      }
    });
  }

  // Comprobar si el usuario ha votado por una canción
  hasVoted(song: ResponseSongDto, voteType: VoteType): boolean {
    return this.songVotes.get(song.id) === voteType;
  }

  // Dar "like" al álbum completo
  likeAlbum(): void {
    // Esta funcionalidad se implementará en el futuro
    console.log('Me gusta álbum:', this.album?.name);
  }

  protected readonly VoteType = VoteType;
}
